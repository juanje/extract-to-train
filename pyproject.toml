[project]
name = "extract-to-train"
version = "0.1.0"
description = "Extract information from PDFs to create training datasets for LLM fine-tuning"
authors = [
    {name = "Juanje Ojeda", email = "juanje@redhat.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["pdf", "extraction", "llm", "fine-tuning", "dataset", "ai", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: General",
]

dependencies = [
    # Document Processing
    "docling>=2.0.0",
    "markdown>=3.5.0",
    
    # LLM Framework
    "langchain>=0.3.0",
    "langchain-community>=0.3.0",
    "langchain-ollama>=0.2.0",
    
    # Data Models and Validation
    "pydantic>=2.8.0",
    
    # CLI
    "typer>=0.12.0",
    "rich>=13.0.0",  # For beautiful CLI output
    
    # HTTP Client
    "httpx>=0.27.0",
    
    # Utilities
    "python-json-logger>=2.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    
    # Code Quality
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    
    # Development Tools
    "pre-commit>=3.8.0",
]

[project.scripts]
extract-to-train = "extract_to_train.cli:main"

[project.urls]
Homepage = "https://github.com/juanje/extract-to-train"
Repository = "https://github.com/juanje/extract-to-train"
Documentation = "https://github.com/juanje/extract-to-train/docs"
Issues = "https://github.com/juanje/extract-to-train/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by line-length
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["extract_to_train"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "docling.*",
    "langchain.*",
    "ollama.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/extract_to_train",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=30",  # Reducido para desarrollo
    "-v",  # Verbose output
    "--tb=short",  # Shorter traceback format
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests that require external services",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "types-markdown>=3.8.0.20250708",
    "types-pyyaml>=6.0.12.20250516",
]
